// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Topic {
  id           String     @id @default(uuid())
  title        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  lastAccessed DateTime   @default(now())
  FileUpload   FileUpload[]
  Notes        Notes[]
  Links        Links[]
  parentId     String?    @map("parent_id")
  parent       Topic?     @relation(name: "ParentChildren", fields: [parentId], references: [id])
  children     Topic[]    @relation(name: "ParentChildren")
  labelId      String?    // This is the foreign key referencing Label
  label        Label?     @relation(fields: [labelId], references: [id]) // Correctly setup relation
}

model Label {
  id          String   @id @default(uuid())
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  topics      Topic[]  // This implicitly creates a one-to-many relation from Label to Topic
}


model FileUpload {
  id          String   @id @default(uuid())
  title       String
  filename    String
  mimeType    String
  size        Int
  data        Bytes
  createdAt   DateTime @default(now())
  topicId     String?  @map("topic_id")
  topic       Topic?   @relation(fields: [topicId], references: [id], onDelete: SetNull)
}

model Notes {
  id      String @id @default(uuid())
  title   String
  content String
  topicId String? @map("topic_id")
  topic   Topic?  @relation(fields: [topicId], references: [id], onDelete: SetNull)
}

model Links {
  id      String @id @default(uuid())
  title   String
  url     String
  desc    String
  topicId String? @map("topic_id")
  topic   Topic?  @relation(fields: [topicId], references: [id], onDelete: SetNull)
}

